#!/usr/bin/env node

/**
 * Critical CSS Extraction Script
 * Extracts above-the-fold CSS for inline inclusion in HTML head
 * Part of Critical Rendering Path Optimization
 */

const critical = require('critical');
const path = require('path');
const fs = require('fs').promises;

// Configuration for critical CSS extraction
const config = {
  // Jekyll site configuration
  base: path.join(__dirname, 'docs/_site/'),
  src: 'index.html',

  // Critical CSS output
  dest: path.join(__dirname, 'docs/_includes/critical-css.html'),

  // Viewport dimensions for above-the-fold detection
  dimensions: [
    {
      width: 320, // Mobile portrait
      height: 568,
    },
    {
      width: 768, // Tablet portrait
      height: 1024,
    },
    {
      width: 1200, // Desktop
      height: 800,
    },
  ],

  // Performance targets
  maxBudget: 14000, // 14KB critical CSS budget

  // Extraction options
  extract: true, // Remove critical CSS from main stylesheet
  inlineImages: true, // Inline small images as base64

  // CSS processing
  minify: true,
  cleanCSS: {
    level: 2,
    rebase: false,
  },

  // Ignore these CSS rules (loaded async)
  ignore: [
    /print/, // Print stylesheets
    /@font-face/, // Font declarations (loaded async)
    /\.ai-content/, // AI content components
    /\.assessment/, // Assessment forms
    /\.footer/, // Footer styles
    /@keyframes.*float/, // Non-critical animations
    /\.modal/, // Modal dialogs
    /\.tooltip/, // Tooltips
  ],
};

async function extractCriticalCSS() {
  try {
    // eslint-disable-next-line no-console
    console.log('üöÄ Starting Critical CSS extraction...');

    // Check if Jekyll site is built
    const siteExists = await checkSiteExists();
    if (!siteExists) {
      // eslint-disable-next-line no-console
      console.error('‚ùå Jekyll site not found. Run: bundle exec jekyll build');
      process.exit(1);
    }

    // Extract critical CSS
    const result = await critical.generate(config);

    // Validate critical CSS size
    const criticalSize = Buffer.byteLength(result.css, 'utf8');

    if (criticalSize > config.maxBudget) {
      // eslint-disable-next-line no-console
      console.warn(
        `‚ö†Ô∏è Critical CSS size (${criticalSize} bytes) exceeds budget (${config.maxBudget} bytes)`
      );
      // eslint-disable-next-line no-console
      console.warn(
        'Consider optimizing critical styles or adjusting viewport dimensions'
      );
    } else {
      // eslint-disable-next-line no-console
      console.log(
        `‚úÖ Critical CSS size: ${criticalSize} bytes (${(
          (criticalSize / config.maxBudget) *
          100
        ).toFixed(1)}% of budget)`
      );
    }

    // Create Jekyll include file with critical CSS
    const criticalInclude = `<!-- Critical CSS - Generated by critical-extract.js -->
<style>
${result.css}
</style>
<!-- Performance marker for monitoring -->
<div class="perf-measure-start" style="display:none;"></div>`;

    await fs.writeFile(config.dest, criticalInclude);

    // Update main CSS file with remaining styles
    if (result.uncritical) {
      const mainCSSPath = path.join(__dirname, 'docs/_site/assets/main.css');
      await fs.writeFile(mainCSSPath, result.uncritical);
      // eslint-disable-next-line no-console
      console.log('‚úÖ Updated main.css with non-critical styles');
    }

    // Generate performance report
    await generatePerformanceReport(result, criticalSize);

    // eslint-disable-next-line no-console
    console.log('üéâ Critical CSS extraction completed successfully!');
    // eslint-disable-next-line no-console
    console.log(`üìÅ Critical CSS saved to: ${config.dest}`);
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error('‚ùå Critical CSS extraction failed:', error.message);
    process.exit(1);
  }
}

async function checkSiteExists() {
  try {
    await fs.access(config.base);
    return true;
  } catch {
    return false;
  }
}

async function generatePerformanceReport(result, criticalSize) {
  const report = {
    timestamp: new Date().toISOString(),
    critical: {
      size: criticalSize,
      budget: config.maxBudget,
      utilization: `${((criticalSize / config.maxBudget) * 100).toFixed(1)}%`,
    },
    dimensions: config.dimensions,
    performance: {
      estimatedFCP: criticalSize < 14000 ? 'Good (<1.8s)' : 'Needs Improvement',
      estimatedLCP: criticalSize < 10000 ? 'Good (<2.5s)' : 'Fair',
    },
  };

  const reportPath = path.join(__dirname, 'critical-css-report.json');
  await fs.writeFile(reportPath, JSON.stringify(report, null, 2));

  // eslint-disable-next-line no-console
  console.log('\nüìä Performance Report:');
  // eslint-disable-next-line no-console
  console.log(`   Critical CSS Size: ${criticalSize} bytes`);
  // eslint-disable-next-line no-console
  console.log(`   Budget Utilization: ${report.critical.utilization}`);
  // eslint-disable-next-line no-console
  console.log(`   Estimated FCP: ${report.performance.estimatedFCP}`);
  // eslint-disable-next-line no-console
  console.log(`   Report saved to: ${reportPath}`);
}

// CLI execution
if (require.main === module) {
  extractCriticalCSS();
}

module.exports = { extractCriticalCSS, config };
