// Mixins and Functions - Critical Rendering Path Optimization
// ===========================================================
// This file provides utility mixins and functions for the modular CSS architecture.
// Optimized for performance, accessibility, and maintainability.

// =============================================================================
// BREAKPOINT MIXINS
// =============================================================================

// Mobile-first responsive design
@mixin mobile-up {
  @media (min-width: #{$mobile}) {
    @content;
  }
}

@mixin tablet-up {
  @media (min-width: #{$tablet}) {
    @content;
  }
}

@mixin desktop-up {
  @media (min-width: #{$desktop}) {
    @content;
  }
}

// Mobile-specific styles
@mixin mobile-only {
  @media (max-width: #{$mobile - 1px}) {
    @content;
  }
}

@mixin tablet-only {
  @media (min-width: #{$mobile}) and (max-width: #{$tablet - 1px}) {
    @content;
  }
}

// Custom breakpoint mixin
@mixin breakpoint($size) {
  @media (min-width: #{$size}) {
    @content;
  }
}

// =============================================================================
// MATERIAL DESIGN TYPOGRAPHY MIXINS
// =============================================================================

// Essential Display Styles (only what's actually used)
@mixin display-small {
  font-family: var(--font-display);
  font-size: var(--font-size-display-small);
  font-weight: var(--font-weight-normal);
  line-height: 1.22;
  letter-spacing: 0px;
}

// Material Design Headline Styles
@mixin headline-large {
  font-family: var(--font-display);
  font-size: var(--font-size-headline-large);
  font-weight: var(--font-weight-normal);
  line-height: 1.25;
  letter-spacing: 0px;
}

@mixin headline-medium {
  font-family: var(--font-display);
  font-size: var(--font-size-headline-medium);
  font-weight: var(--font-weight-normal);
  line-height: 1.29;
  letter-spacing: 0px;
}

@mixin headline-small {
  font-family: var(--font-display);
  font-size: var(--font-size-headline-small);
  font-weight: var(--font-weight-normal);
  line-height: 1.33;
  letter-spacing: 0px;
}

// Title styles removed - not used in codebase

// Material Design Body Text
@mixin body-large {
  font-family: var(--font-primary);
  font-size: var(--font-size-body-large);
  font-weight: var(--font-weight-normal);
  line-height: 1.5;
  letter-spacing: 0.5px;
}

// body-medium removed - not used

@mixin body-small {
  font-family: var(--font-primary);
  font-size: var(--font-size-body-small);
  font-weight: var(--font-weight-normal);
  line-height: 1.33;
  letter-spacing: 0.4px;
}

// Essential Label styles (still used)
@mixin label-medium {
  font-family: var(--font-primary);
  font-size: var(--font-size-label-medium);
  font-weight: var(--font-weight-medium);
  line-height: 1.43;
  letter-spacing: 0.5px;
}

// =============================================================================
// LEGACY TYPOGRAPHY MIXINS (for backward compatibility)
// =============================================================================

// Heading styles with consistent hierarchy

@mixin heading-1 {
  @include display-small;

  color: var(--text-dark);
}

@mixin heading-2 {
  @include headline-large;

  color: var(--header-dark-navy);
}

@mixin heading-3 {
  @include headline-medium;

  color: var(--text-dark);
}

@mixin heading-4 {
  @include headline-small;

  color: var(--text-medium);
}

// Hero and large text styles
@mixin heading-xl {
  font-family: var(--font-display);
  font-size: clamp(2.5rem, 5vw, 4rem);
  font-weight: var(--font-weight-bold);
  line-height: var(--line-height-tight);
  color: var(--text-white);
  margin: 0;
}

@mixin text-lg {
  font-family: var(--font-primary);
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-normal);
  line-height: var(--line-height-relaxed);
}

// Essential legacy text styles (still used)
@mixin body-text {
  @include body-large; // Map to Material Design body-large
}

// =============================================================================
// LAYOUT MIXINS
// =============================================================================

// Flexbox utilities
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

// Essential grid mixin (still used)
@mixin grid-auto-fit($min-width: 250px) {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
  gap: var(--space-lg);
}

// Other unused layout mixins removed (flex-column-center, grid-auto-fill, container, section-spacing)

// =============================================================================
// VISUAL EFFECTS MIXINS
// =============================================================================

// Card styling with consistent elevation
@mixin card($elevation: "md") {
  background: var(--background-white);
  border-radius: var(--radius-lg);
  border: 1px solid var(--border-light);

  @if $elevation == "sm" {
    box-shadow: var(--shadow-sm);
  } @else if $elevation == "md" {
    box-shadow: var(--shadow-md);
  } @else if $elevation == "lg" {
    box-shadow: var(--shadow-lg);
  } @else if $elevation == "xl" {
    box-shadow: var(--shadow-xl);
  }
}

// Hover card with smooth transitions
@mixin card-hover {
  @include card;

  transition: transform var(--duration-normal) var(--ease-out),
    box-shadow var(--duration-normal) var(--ease-out);

  &:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-xl);
  }
}

// Button base styling
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--space-sm);
  padding: var(--space-lg) var(--space-2xl);
  border: none;
  border-radius: var(--radius-lg);
  font-family: var(--font-display);
  font-weight: var(--font-weight-semibold);
  font-size: var(--font-size-sm);
  line-height: 1;
  text-decoration: none;
  cursor: pointer;
  transition: all var(--duration-normal) var(--ease-out);
  min-height: var(--touch-target-min);
  letter-spacing: var(--letter-spacing-wide);
  text-transform: uppercase;

  &:focus {
    @include focus-ring;
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none !important;
  }
}

// Primary button styling
@mixin button-primary {
  @include button-base;

  background: var(--button-gradient);
  color: var(--text-white);
  box-shadow: var(--button-shadow);

  &:hover:not(:disabled) {
    background: var(--button-hover-gradient);
    transform: var(--transform-hover-lift);
    box-shadow: var(--shadow-lg);
  }
}

// Secondary button styling
@mixin button-secondary {
  @include button-base;

  background: transparent;
  color: var(--accent-coral);
  border: 2px solid var(--accent-coral);

  &:hover:not(:disabled) {
    background: var(--accent-coral);
    color: var(--text-white);
    transform: var(--transform-hover-lift);
  }
}

// =============================================================================
// ACCESSIBILITY MIXINS
// =============================================================================

// Focus ring for keyboard navigation
@mixin focus-ring($color: var(--focus-ring-color)) {
  outline: var(--focus-ring-width) solid $color;
  outline-offset: var(--focus-ring-offset);
}

// Screen reader only text
@mixin sr-only {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

// Skip link styling
@mixin skip-link {
  @include sr-only;

  &:focus {
    position: absolute !important;
    top: var(--space-sm) !important;
    left: var(--space-sm) !important;
    width: auto !important;
    height: auto !important;
    padding: var(--space-sm) var(--space-lg) !important;
    margin: 0 !important;
    overflow: visible !important;
    clip: auto !important;
    white-space: normal !important;
    background: var(--accent-teal) !important;
    color: var(--text-white) !important;
    border-radius: var(--radius-md) !important;
    font-weight: var(--font-weight-semibold) !important;
    text-decoration: none !important;
    z-index: var(--z-tooltip) !important;
  }
}

// Touch target size for mobile
@mixin touch-target {
  min-height: var(--touch-target-min);
  min-width: var(--touch-target-min);
}

// 44px touch target for WCAG 2.1 AA compliance
@mixin touch-target-44px {
  min-height: 44px;
  min-width: 44px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 8px 16px;

  // Ensure adequate spacing between targets
  margin: 2px;
}

// High contrast mode support
@mixin high-contrast {
  @media (prefers-contrast: high) {
    @content;
  }
}

// Reduced motion support
@mixin reduced-motion {
  @media (prefers-reduced-motion: reduce) {
    @content;
  }
}

// =============================================================================
// PERFORMANCE OPTIMIZATION MIXINS
// =============================================================================

// Will-change optimization removed - not used in static site

// GPU acceleration for animations
@mixin hardware-acceleration {
  transform: translate3d(0, 0, 0);
  backface-visibility: hidden;
  perspective: 1000px;

  @include reduced-motion {
    transform: none;
    backface-visibility: visible;
    perspective: none;
  }
}

// Smooth scrolling
@mixin smooth-scroll {
  scroll-behavior: smooth;

  @include reduced-motion {
    scroll-behavior: auto;
  }
}

// =============================================================================
// GRADIENT MIXINS
// =============================================================================

// Hero gradient
@mixin hero-gradient {
  background: var(--hero-dark);
}

// DORA gradient mixins removed - not used

// =============================================================================
// ANIMATION MIXINS
// =============================================================================

// Animation mixins removed - not used in static site

// Float animation removed - not used in static site

// =============================================================================
// COMPONENT-SPECIFIC MIXINS
// =============================================================================

// Component-specific mixins removed - not used (hero-banner, metric-card, section-accent)

// =============================================================================
// UTILITY FUNCTIONS
// =============================================================================

// Strip units from values
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

// Convert px to em
@function em($pixels, $context: 16) {
  @return #{$pixels / $context}em;
}

// Convert px to rem with fallback
@function rem-with-fallback($pixels, $base: 16) {
  $rem: #{$pixels / $base}rem;

  @return $rem;
}

// Calculate fluid typography
@function fluid-type(
  $min-size,
  $max-size,
  $min-width: $mobile,
  $max-width: $desktop
) {
  $min-size-px: strip-unit($min-size);
  $max-size-px: strip-unit($max-size);
  $min-width-px: strip-unit($min-width);
  $max-width-px: strip-unit($max-width);
  $slope: ($max-size-px - $min-size-px) / ($max-width-px - $min-width-px);
  $intercept: $min-size-px - $slope * $min-width-px;

  @return clamp(
    #{$min-size},
    #{$intercept}px + #{$slope * 100}vw,
    #{$max-size}
  );
}

// =============================================================================
// VALIDATION MIXINS
// =============================================================================

// Debug and aspect-ratio mixins removed - not used

// =============================================================================
// PERFORMANCE NOTES
// =============================================================================

/*
CRITICAL RENDERING PATH OPTIMIZATION NOTES:

1. MIXIN PERFORMANCE:
   - Mixins are compiled at build time, no runtime overhead
   - Use @include sparingly to avoid CSS bloat
   - Prefer utility classes for commonly repeated patterns

2. ANIMATION OPTIMIZATION:
   - Always respect prefers-reduced-motion
   - Use transform and opacity for smooth animations
   - Avoid animating layout properties (width, height, margin)
   - Use will-change sparingly and remove after animation

3. ACCESSIBILITY FIRST:
   - All interactive elements have 44px touch targets
   - Focus rings are clearly visible and consistent
   - Screen reader content is properly hidden/exposed
   - High contrast mode is supported

4. RESPONSIVE DESIGN:
   - Mobile-first approach reduces CSS overhead
   - Use logical breakpoints based on content
   - Container queries coming in future version

5. BROWSER COMPATIBILITY:
   - CSS custom properties used throughout
   - Fallbacks provided for newer properties
   - Progressive enhancement approach

USAGE GUIDELINES:
- Import this file after _tokens.scss
- Use semantic mixins over utility mixins when possible
- Document custom mixins thoroughly
- Test all mixins across target browsers
- Validate accessibility compliance regularly
*/
