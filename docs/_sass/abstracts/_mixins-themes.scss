// =============================================================================
// MEETING THEME MIXINS
// =============================================================================
// Dynamic theme application using mixins instead of duplicate tokens
// Reduces 40 meeting color tokens to a single mixin system

// Meeting Theme Data
// Each meeting has 5 semantic colors following Material Design principles
$meeting-themes: (
  "meeting-1": (
    "primary": #0969da,
    "secondary": #1f6feb,
    "accent": #388bfd,
    "surface": #f6f8fa,
    "on-surface": #24292f,
  ),
  "meeting-2": (
    "primary": #1a7f37,
    "secondary": #238636,
    "accent": #2da44e,
    "surface": #f0fff4,
    "on-surface": #0d2818,
  ),
  "meeting-3": (
    "primary": #d97706,
    "secondary": #f59e0b,
    "accent": #fbbf24,
    "surface": #fffbeb,
    "on-surface": #451a03,
  ),
  "meeting-4": (
    "primary": #8b5cf6,
    "secondary": #a78bfa,
    "accent": #c4b5fd,
    "surface": #faf5ff,
    "on-surface": #3c1361,
  ),
);

// =============================================================================
// THEME MIXIN - Apply meeting theme colors dynamically
// =============================================================================
// Usage:
//   .meeting-1 { @include meeting-theme("meeting-1"); }
//   .card { @include meeting-theme("meeting-2"); }
// This creates scoped CSS custom properties that cascade to children:
//   --theme-primary, --theme-secondary, --theme-accent, etc.

@mixin meeting-theme($theme-name) {
  $theme: map-get($meeting-themes, $theme-name);

  @if $theme {
    --theme-primary: #{map-get($theme, "primary")};
    --theme-secondary: #{map-get($theme, "secondary")};
    --theme-accent: #{map-get($theme, "accent")};
    --theme-surface: #{map-get($theme, "surface")};
    --theme-on-surface: #{map-get($theme, "on-surface")};
  } @else {
    @warn "Theme '#{$theme-name}' not found in $meeting-themes";
  }
}

// =============================================================================
// GRADIENT MIXIN - Generate meeting gradients dynamically
// =============================================================================
// Usage:
//   background: meeting-gradient("meeting-1");
//   background: meeting-gradient("meeting-2", "hover");

@function meeting-gradient($theme-name, $variant: "default") {
  $theme: map-get($meeting-themes, $theme-name);

  @if not $theme {
    @warn "Theme '#{$theme-name}' not found in $meeting-themes";
    @return null;
  }

  $color1: map-get($theme, "surface");
  $color2: lighten(map-get($theme, "surface"), 5%);

  @if $variant == "hover" {
    $color1: map-get($theme, "primary");
    $color2: map-get($theme, "secondary");
  }

  @return linear-gradient(135deg, $color1, $color2);
}

// =============================================================================
// SHADOW MIXIN - Generate meeting-specific shadows
// =============================================================================
// Usage:
//   box-shadow: meeting-shadow("meeting-1");

@function meeting-shadow($theme-name, $opacity: 0.3) {
  $theme: map-get($meeting-themes, $theme-name);

  @if not $theme {
    @warn "Theme '#{$theme-name}' not found in $meeting-themes";
    @return null;
  }

  $primary: map-get($theme, "primary");

  @return 0 4px 15px rgba($primary, $opacity);
}

// =============================================================================
// UTILITY: Get theme color
// =============================================================================
// Usage:
//   color: theme-color("meeting-1", "primary");

@function theme-color($theme-name, $color-key) {
  $theme: map-get($meeting-themes, $theme-name);

  @if not $theme {
    @warn "Theme '#{$theme-name}' not found";
    @return null;
  }

  @return map-get($theme, $color-key);
}

// =============================================================================
// EXAMPLE USAGE
// =============================================================================
/*
// Before (40 tokens):
.meeting-1 {
  background: var(--meeting-1-surface);
  color: var(--meeting-1-on-surface);
  border-left: 4px solid var(--meeting-1-primary);
}

// After (mixin):
.meeting-1 {
  @include meeting-theme("meeting-1");
  background: var(--theme-surface);
  color: var(--theme-on-surface);
  border-left: 4px solid var(--theme-primary);
}

// Gradient usage:
.meeting-card {
  background: meeting-gradient("meeting-2");

  &:hover {
    background: meeting-gradient("meeting-2", "hover");
  }
}

// Shadow usage:
.meeting-nav-item {
  box-shadow: meeting-shadow("meeting-3", 0.3);
}

// Direct color access (when CSS custom properties won't work):
.static-element {
  border-color: theme-color("meeting-4", "primary");
}
*/
