// Material Design Grid System - Responsive Layout Components
// =========================================================
// Mobile-first responsive grid system following Material Design principles
// with content-specific responsive patterns

// Removed deprecated container and utility grid/flex helpers not used in built HTML

// =============================================================================
// CONTENT-SPECIFIC GRID PATTERNS (Material Design)
// =============================================================================

// DEPRECATED: Use content-grid instead

// DEPRECATED: Use resource-grid instead

// DEPRECATED: Use content-grid instead

// DEPRECATED: Use feature-grid instead

// DEPRECATED: Use resource-grid (semantic version below) instead

// DEPRECATED: Use feature-grid instead

// DEPRECATED PATTERNS - Use semantic grid classes instead:
// insights-grid, discussion-questions-grid, highlight-grid → card-grid
// outcomes-grid, chapters-grid-modern, stats-grid → resource-grid

// Removed responsive visibility and spacing utilities

// =============================================================================
// SEMANTIC GRID SYSTEM - 4 CORE PATTERNS
// =============================================================================
// Consolidates 18+ grid patterns into 4 semantic, reusable patterns
// Based on content type and responsive behavior analysis

// 1. CONTENT GRID - For educational content, learning materials
// Usage: Article content, learning sections, educational materials
// Pattern: 4→2→1 responsive progression
.content-grid {
  display: grid;
  gap: var(--space-lg); // 32px for comfortable reading
  grid-template-columns: 1fr; // Mobile: 1 column

  @include mobile-up {
    grid-template-columns: repeat(2, 1fr); // Tablet: 2 columns
  }

  @include tablet-up {
    grid-template-columns: repeat(4, 1fr); // Desktop: 4 columns
  }
}

// 2. CARD GRID - For resource cards, content cards, general displays
// Usage: Resource listings, insight cards, general content cards
// Pattern: Auto-fit with consistent minimum width
.card-grid {
  display: grid;
  gap: var(--space-lg); // 32px for visual breathing room
  grid-template-columns: repeat(
    auto-fit,
    minmax(280px, 1fr)
  ); // Responsive auto-fit

  @include mobile-only {
    grid-template-columns: 1fr; // Mobile: Force single column for readability
    gap: var(--space-sm); // 8px tighter gap on mobile
  }
}

// 3. RESOURCE GRID - For compact resource displays, navigation elements
// Usage: Resource listings, compact content, utility displays
// Pattern: 3→2→1 responsive with tighter spacing
.resource-grid {
  display: grid;
  gap: var(--space-lg); // 24px for better vertical spacing on mobile (stacked items)
  grid-template-columns: 1fr; // Mobile: 1 column

  @include mobile-only {
    gap: var(--space-sm); // 8px on mobile for tighter layout
  }

  @include mobile-up {
    grid-template-columns: repeat(2, 1fr); // Tablet: 2 columns
    gap: var(--space-md);
  }

  @include tablet-up {
    grid-template-columns: repeat(3, 1fr); // Desktop: 3 columns
  }
}

// 4. FEATURE GRID - For hero features, promotional content, highlights
// Usage: Hero features, meeting overviews, key highlights
// Pattern: 2→1 responsive with generous spacing
.feature-grid {
  display: grid;
  gap: var(--space-xl); // 48px for prominent display
  grid-template-columns: 1fr; // Mobile: 1 column

  @include mobile-up {
    grid-template-columns: repeat(2, 1fr); // Tablet+: 2 columns
    gap: var(--space-2xl); // Even more space on larger screens
  }
}

// Removed compact/spacious grid modifiers
